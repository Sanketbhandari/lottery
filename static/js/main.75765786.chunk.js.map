{"version":3,"sources":["getWeb3.js","components/Manager.js","components/Players.js","components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Manager","state","useState","account","setAccount","cbalance","setCbalance","lwinner","setLwinner","useEffect","accounts","eth","getAccounts","on","setAccountListener","givenProvider","getAccount","className","id","aria-disabled","onClick","contract","methods","pickWinner","send","from","lotteryWinner","winner","call","e","message","includes","balance","getBalance","Players","address","registerdPlayers","setRegisterdPlayers","reload","setReload","players","allPlayers","all","map","player","getPlayers","length","name","key","Intro","to","App","setState","setAddress","networkId","net","getId","deployedNetwork","Lottery","networks","instance","Contract","abi","alert","init","aria-current","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75765786.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;","import React, { useState, useEffect } from \"react\";\r\nimport \"./Manager.css\";\r\n\r\nconst Manager = ({ state }) => {\r\n  const [account, setAccount] = useState(\"\");\r\n  const [cbalance, setCbalance] = useState(0);\r\n  const [lwinner, setLwinner] = useState(\"No winner yet\");\r\n\r\n  const setAccountListener = (provider) => {\r\n    provider.on(\"accountsChanged\", (accounts) => {\r\n      setAccount(accounts[0]);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    const getAccount = async () => {\r\n      const { web3 } = state;\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      setAccountListener(web3.givenProvider);\r\n      setAccount(accounts[0]);\r\n    };\r\n    state.web3 && getAccount();\r\n  }, [state, state.web3]);\r\n\r\n  const contractBalance = async () => {\r\n    const { contract } = state;\r\n    try {\r\n      const balance = await contract.methods\r\n        .getBalance()\r\n        .call({ from: account });\r\n      console.log(balance);\r\n      setCbalance(balance);\r\n    } catch (e) {\r\n      setCbalance(\"You are not the manager\");\r\n    }\r\n  };\r\n\r\n  const winner = async () => {\r\n    const { contract } = state;\r\n    try {\r\n      await contract.methods.pickWinner().send({ from: account });\r\n      const lotteryWinner = await contract.methods.winner().call();\r\n      console.log(lotteryWinner);\r\n      setLwinner(lotteryWinner);\r\n    } catch (e) {\r\n      if (e.message.includes(\"You are not the manager\")) {\r\n        setLwinner(\"You are not the manager\");\r\n      } else if (e.message.includes(\"Players are less than 3\")) {\r\n        setLwinner(\"There are less than 3 players\");\r\n      } else {\r\n        setLwinner(\"No winner yet\");\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <ul className=\"list-group\" id=\"list\">\r\n      <div className=\"center\">\r\n        <li className=\"list-group-item\" aria-disabled=\"true\">\r\n          <b>Connected account :</b> {account}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <b> Winner : </b>\r\n          {lwinner}\r\n          <button className=\"button1\" onClick={winner}>\r\n            Click For Winner\r\n          </button>\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          <b>Balnace : </b> {cbalance} ETH\r\n          <button className=\"button1\" onClick={contractBalance}>\r\n            Click For Balance\r\n          </button>\r\n        </li>\r\n      </div>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Manager;","import React, { useEffect, useState } from \"react\";\r\nconst Players = ({ state, address }) => {\r\n  const [account, setAccount] = useState(\"No account connected\");\r\n  const [registerdPlayers, setRegisterdPlayers] = useState([]);\r\n  const [reload, setReload] = useState(false);\r\n\r\n  const reloadEffect = () => {\r\n    setReload(!reload);\r\n  };\r\n\r\n  const setAccountListener = (provider) => {\r\n    provider.on(\"accountsChanged\", (accounts) => {\r\n      setAccount(accounts[0]);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    const getAccount = async () => {\r\n      const { web3 } = state;\r\n      const accounts = await web3.eth.getAccounts();\r\n      //  console.log(accounts);\r\n      setAccountListener(web3.givenProvider);\r\n\r\n      setAccount(accounts[0]);\r\n    };\r\n    state.web3 && getAccount();\r\n  }, [state, state.web3]);\r\n  useEffect(() => {\r\n    const getPlayers = async () => {\r\n      const { contract } = state;\r\n      const players = await contract.methods.allPlayers().call();\r\n      const registerdPlayers = await Promise.all(\r\n        players.map((player) => {\r\n          return player;\r\n        })\r\n      );\r\n\r\n      console.log(registerdPlayers);\r\n      setRegisterdPlayers(registerdPlayers);\r\n      reloadEffect();\r\n    };\r\n    state.contract && getPlayers();\r\n  }, [state, state.contract, reload]);\r\n  return (\r\n    <>\r\n      <ul className=\"list-group\" id=\"list\">\r\n        <div className=\"center\">\r\n          <li className=\"list-group-item\" aria-disabled=\"true\">\r\n            <b>Connected account :</b> {account}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <b>Please pay 1 ether on this contract address : </b> {address}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <b>Registerd Players </b>:\r\n            <br />\r\n            <br />\r\n            {registerdPlayers.length !== 0 &&\r\n              registerdPlayers.map((name) => <p key={name}>{name}</p>)}\r\n          </li>\r\n        </div>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nexport default Players;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Intro.css\";\r\nconst Intro = () => {\r\n  return (\r\n    <>\r\n      <ul className=\"list-group\" id=\"list\">\r\n    <h1 className=\"main\">Welcome to Lottery Dapp</h1>\r\n\r\n        <div className=\"center\">\r\n          <li className=\"list-group-item\" aria-disabled=\"true\">\r\n            <h1>You are</h1>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <Link to=\"/manager\" className=\"text-decoration-none text\">\r\n              <button className=\"button1\">Manager</button>\r\n            </Link>\r\n\r\n            <Link to=\"/players\" className=\"text-decoration-none text\">\r\n              <button className=\"button1 player\">Player</button>\r\n            </Link>\r\n          </li>\r\n        </div>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Intro;","import React, { useState, useEffect } from \"react\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport Lottery from \"./contracts/Lottery.json\";\r\n\r\nimport Manager from \"./components/Manager\";\r\nimport Players from \"./components/Players\";\r\nimport Intro from \"./components/Intro\";\r\nimport \"./App.css\";\r\nimport { Route, Link } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState({\r\n    web3: null,\r\n    contract: null,\r\n  });\r\n  const [address, setAddress] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        const web3 = await getWeb3();\r\n        const networkId = await web3.eth.net.getId();\r\n\r\n        const deployedNetwork = Lottery.networks[networkId];\r\n        console.log(\"Contract Address:\", deployedNetwork.address);\r\n        const instance = new web3.eth.Contract(\r\n          Lottery.abi,\r\n          deployedNetwork && deployedNetwork.address\r\n        );\r\n        setAddress(deployedNetwork.address);\r\n        setState({ web3, contract: instance });\r\n      } catch (error) {\r\n        alert(\"Falied to load web3 or contract.\");\r\n        console.log(error);\r\n      }\r\n    };\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-expand-lg navbar\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link navtext\" aria-current=\"page\">\r\n                  Lottery System\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  to=\"/manager\"\r\n                  className=\"nav-link navtext\"\r\n                  aria-current=\"page\"\r\n                >\r\n                  Manger\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/players\" className=\"nav-link navtext\">\r\n                  Player\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <Route exact path=\"/\">\r\n        <Intro></Intro>\r\n      </Route>\r\n      <Route path=\"/manager\">\r\n        <Manager state={state} />\r\n      </Route>\r\n      <Route path=\"/players\">\r\n        <Players address={address} state={state} />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}